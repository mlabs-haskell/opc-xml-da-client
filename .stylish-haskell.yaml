steps:
  - simple_align:
      cases: never
      top_level_patterns: never
      records: never
      multi_way_if: never
  - imports:
      align: none
      list_align: after_alias
      pad_module_names: false
      long_list_align: new_line
      empty_list_align: inherit
      list_padding: 2
      separate_lists: true
      space_surround: false
  - language_pragmas:
      style: compact
      remove_redundant: true
  - trailing_whitespace: {}
columns: 100
newline: native
language_extensions:
  - BangPatterns
  - BlockArguments
  - ConstraintKinds
  - DataKinds
  - DefaultSignatures
  - DeriveAnyClass
  - DeriveDataTypeable
  - DeriveGeneric
  - DerivingStrategies
  - DerivingVia
  - EmptyCase
  - ExistentialQuantification
  - ExplicitNamespaces
  - FlexibleContexts
  - FlexibleInstances
  - FunctionalDependencies
  - GADTs
  - GeneralizedNewtypeDeriving
  - LambdaCase
  - MultiParamTypeClasses
  - MultiWayIf
  - NamedFieldPuns
  - NoImplicitPrelude
  - OverloadedLabels
  - OverloadedStrings
  - PatternSynonyms
  - RebindableSyntax
  - RecordWildCards
  - RecursiveDo
  - ScopedTypeVariables
  - StandaloneDeriving
  - TemplateHaskell
  - TemplateHaskellQuotes
  - TupleSections
  - TypeApplications
  - TypeFamilies
  - TypeOperators
  - ViewPatterns
  - QuasiQuotes
